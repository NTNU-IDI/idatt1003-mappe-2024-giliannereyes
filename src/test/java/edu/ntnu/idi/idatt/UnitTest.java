package edu.ntnu.idi.idatt;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import edu.ntnu.idi.idatt.domain.Unit;
import org.junit.jupiter.api.Test;

/**
 * Unit tests for the {@link Unit} class.
 *
 * <br><b>Positive Tests:</b>
 * <ul>
 *   <li>Verifies that units of the same type are correctly identified as compatible</li>
 *   <li>Tests conversion of values to the base unit</li>
 *   <li>Tests conversion of values from the base unit</li>
 *   <li>Retrieves a unit by its symbol</li>
 * </ul>
 *
 * <br><b>Negative Tests:</b>
 * <ul>
 *   <li>Ensures that units of different types are correctly identified as incompatible/li>
 *   <li>Throws an {@code IllegalArgumentException} when {@link Unit#isCompatibleWith(Unit)}
 *   is called with a {@code null} unit.</li>
 *   <li>Throws an {@code IllegalArgumentException} when converting
 *   to or from the base unit using negative values</li>
 *   <li>Throws an {@code IllegalArgumentException} when retrieving a unit by an invalid symbol</li>
 * </ul>
 *
 * <strong>This class-level documentation was generated by ChatGPT.</strong>
 */
public class UnitTest {
  // ------------------------- POSITIVE TESTS ----------------------------------
  /**
   * Tests checking if two units are compatible
   * using the {@link Unit#isCompatibleWith(Unit)} method.
   *
   * <p>Expected outcome: The method should correctly identify
   * units of the same type as compatible.</p>
   */
  @Test
  void testUnitCompatibilityWithSameType() {
    assertTrue(Unit.LITRE.isCompatibleWith(Unit.DECILITRE));
    assertTrue(Unit.GRAM.isCompatibleWith(Unit.MILLIGRAM));
    assertTrue(Unit.PIECE.isCompatibleWith(Unit.PIECE));
  }

  /**
   * Tests converting values of a unit to values of another unit.
   * using the {@link Unit#convertTo(Unit, double)} method.
   *
   * <p>Expected outcome: The method should correctly convert values to
   * the specified unit.</p>
   */
  @Test
  void testConvertToValidUnits() {
    assertEquals(0.001, Unit.MILLILITRE.convertTo(Unit.LITRE, 1));
    assertEquals(1000, Unit.LITRE.convertTo(Unit.MILLILITRE, 1));
    assertEquals(0.001, Unit.GRAM.convertTo(Unit.KILOGRAM, 1));
    assertEquals(1000, Unit.KILOGRAM.convertTo(Unit.GRAM, 1));
    assertEquals(1, Unit.PIECE.convertTo(Unit.PIECE, 1));
  }

  /**
   * Tests retrieving a unit by its symbol
   * using the {@link Unit#getUnitBySymbol(String)} method.
   *
   * <p>Expected outcome: The method should return the correct unit for valid symbols.</p>
   */
  @Test
  void testGetValidUnitBySymbol() {
    assertEquals(Unit.MILLILITRE, Unit.getUnitBySymbol("ml"));
    assertEquals(Unit.MILLILITRE, Unit.getUnitBySymbol("mL"));
    assertEquals(Unit.KILOGRAM, Unit.getUnitBySymbol("kg"));
    assertEquals(Unit.KILOGRAM, Unit.getUnitBySymbol("KG"));
    assertEquals(Unit.PIECE, Unit.getUnitBySymbol("piece"));
    assertEquals(Unit.PIECE, Unit.getUnitBySymbol("PIECE"));
  }

  // ------------------------- NEGATIVE TESTS ----------------------------------

  /**
   * Tests checking if two units are compatible
   * using the {@link Unit#isCompatibleWith(Unit)} method.
   *
   * <p>Expected outcome: The method should correctly identify units
   * of different types as incompatible.</p>
   */
  @Test
  void testUnitCompatibilityWithDifferentTypes() {
    assertFalse(Unit.LITRE.isCompatibleWith(Unit.KILOGRAM));
    assertFalse(Unit.MILLIGRAM.isCompatibleWith(Unit.DECILITRE));
    assertFalse(Unit.PIECE.isCompatibleWith(Unit.KILOGRAM));
  }

  /**
   * Tests checking if two units are compatible
   * using the {@link Unit#isCompatibleWith(Unit)} method.
   *
   * <p>Expected outcome: The method should throw an
   * IllegalArgumentException when given a null unit.</p>
   */
  @Test
  void testUnitCompatibilityWithNullUnit() {
    assertThrows(IllegalArgumentException.class, () -> Unit.LITRE.isCompatibleWith(null));
    assertThrows(IllegalArgumentException.class, () -> Unit.GRAM.isCompatibleWith(null));
    assertThrows(IllegalArgumentException.class, () -> Unit.PIECE.isCompatibleWith(null));
  }

  /**
   * Tests converting values from one unit to an incompatible unit
   * using the {@link Unit#convertTo(Unit, double)} method.
   *
   * <p>Expected outcome: The method should throw an IllegalArgumentException.</p>
   */
  @Test
  void testConvertToInvalidUnits() {
    assertThrows(IllegalArgumentException.class, () -> Unit.LITRE.convertTo(Unit.GRAM, 0.5));
    assertThrows(IllegalArgumentException.class, () -> Unit.GRAM.convertTo(Unit.PIECE, 500));
    assertThrows(IllegalArgumentException.class, () -> Unit.PIECE.convertTo(Unit.LITRE, 1));
    assertThrows(IllegalArgumentException.class, () -> Unit.KILOGRAM.convertTo(Unit.LITRE, 100));
  }

  /**
   * Tests retrieving a unit by its symbol using the {@link Unit#getUnitBySymbol(String)} method.
   *
   * <p>Expected outcome: The method should throw an
   * IllegalArgumentException for invalid symbols.</p>
   */
  @Test
  void testGetInvalidUnitBySymbol() {
    assertThrows(IllegalArgumentException.class, () -> Unit.getUnitBySymbol("invalid"));
    assertThrows(IllegalArgumentException.class, () -> Unit.getUnitBySymbol("123"));
    assertThrows(IllegalArgumentException.class, () -> Unit.getUnitBySymbol("unit"));
  }
}
