package edu.ntnu.iir.bidata;

import edu.ntnu.iir.bidata.model.Fridge;
import edu.ntnu.iir.bidata.model.Ingredient;
import edu.ntnu.iir.bidata.model.Unit;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * Unit tests for the {@link Fridge} class.
 *
 * <p>The following tests validate the functionality and robustness of the
 * {@code Fridge} class:</p>
 *
 * <b>Positive Tests:</b>
 * <ul>
 *   <li>Adds a valid ingredient to the fridge.</li>
 *   <li>Adds a duplicate ingredient and ensures that the
 *       existing ingredient's quantity is increased instead.</li>
 *   <li>Finds an ingredient by name regardless of case or surrounding whitespace.</li>
 *   <li>Decreases an ingredient's quantity by valid amounts and
 *       removes ingredients if their quantity becomes zero.</li>
 *   <li>Finds the ingredients expiring before a specified date.</li>
 *   <li>Sorts the ingredients alphabetically.</li>
 *   <li>Calculates the correct total price of all ingredients.</li>
 * </ul>
 *
 * <b>Negative Tests:</b>
 * <ul>
 *   <li>Adds a {@code null} ingredient.</li>
 *   <li>Decreases the quantity of a non-existent ingredient.</li>
 *   <li>Decreases the quantity with an amount that
 *       results in a negative quantity for the ingredient.</li>
 *   <li>Decreases an ingredient's quantity with a negative amount.</li>
 *   <li>Decreases an ingredient's quantity with a {@code null} unit.</li>
 *   <li>Finds a non-existent ingredient by name.</li>
 *   <li>Sorts ingredients when the fridge is empty.</li>
 *   <li>Calculates the total price of ingredients when the fridge is empty.</li>
 * </ul>
 *
 * <strong>This class-level documentation was generated by ChatGPT.</strong>
 */
public class FridgeTest {
  private Fridge fridge;
  private Ingredient milk;
  private Ingredient egg;

  /**
   * Set up the fridge and ingredients before each test.
   */
  @BeforeEach
  void setUp() {
    fridge = new Fridge();
    milk = new Ingredient("Milk", 1, 20, Unit.LITRE, LocalDate.now().plusDays(5));
    egg = new Ingredient("Egg", 12, 3, Unit.PIECE, LocalDate.now().plusDays(20));
    fridge.addIngredient(milk);
    fridge.addIngredient(egg);
  }

  // --------------------------- POSITIVE TESTS ----------------------------------

  /**
   * Test adding a new ingredient to the fridge where the ingredient is a valid instance.
   * Expected outcome: The ingredient should be added to the fridge's list of ingredients.
   */
  @Test
  void testAddNewValidIngredient() {
    Ingredient cheese = new Ingredient("Cheese", 0.5, 30, Unit.KILOGRAM, LocalDate.now().plusDays(10));
    fridge.addIngredient(cheese);
    assertTrue(fridge.getIngredients().contains(cheese));
  }

  /**
   * Test adding an ingredient that matches an existing ingredient in the fridge.
   * Ingredients matching means they have the same name, price per unit, expiry date
   * and the units are compatible.
   * Expected outcome: The existing ingredient's quantity should be increased by the new ingredient's quantity.
   */
  @Test
  void testAddDuplicateIngredient() {
    Ingredient milk2 = new Ingredient("Milk", 2.5, 20, Unit.LITRE, LocalDate.now().plusDays(5));
    fridge.addIngredient(milk2);
    assertFalse(fridge.getIngredients().contains(milk2));
    assertTrue(fridge.findIngredientByName("Milk").isPresent());
    assertEquals(3.5, fridge.findIngredientByName("Milk").get().getQuantity());

    Ingredient milk3 = new Ingredient("MILK", 10, 20, Unit.DECILITRE, LocalDate.now().plusDays(5));
    fridge.addIngredient(milk3);
    assertFalse(fridge.getIngredients().contains(milk3));
    assertEquals(4.5, fridge.findIngredientByName("Milk").get().getQuantity());
  }

  /**
   * Test removing a valid amount of an ingredient from the fridge.
   * Expected outcome: The ingredient's quantity should be decreased by the specified amount.
   */
  @Test
  void testRemoveAValidQuantityOfIngredient() {
    fridge.removeIngredient("Milk", 0.5, Unit.LITRE);
    assertTrue(fridge.findIngredientByName("Milk").isPresent());
    assertEquals(0.5, fridge.findIngredientByName("Milk").get().getQuantity());
    fridge.removeIngredient("Milk", 2, Unit.DECILITRE);
    assertEquals(0.3, fridge.findIngredientByName("Milk").get().getQuantity());
  }

  /**
   * Test removing all of an ingredient from the fridge.
   * Expected outcome: The ingredient should be removed from the fridge's list of ingredients.
   */
  @Test
  void testRemoveAllQuantityOfIngredient() {
    fridge.removeIngredient("Milk", 1, Unit.LITRE);
    assertTrue(fridge.findIngredientByName("Milk").isEmpty());
    assertFalse(fridge.getIngredients().contains(milk));
  }

  /**
   * Test finding an ingredient by its name. The search should be case-insensitive
   * and ignore any surrounding whitespace.
   * Expected outcome: The ingredient should be found regardless of the case of the name.
   */
  @Test
  void testFindExistingIngredientByName() {
    assertTrue(fridge.findIngredientByName("Milk    ").isPresent());
    assertEquals(milk, fridge.findIngredientByName("Milk    ").get());
    assertTrue(fridge.findIngredientByName("miLk").isPresent());
    assertEquals(milk, fridge.findIngredientByName("miLk").get());
  }

  /**
   * Test retrieving ingredients that expire before a specified date.
   * Expected outcome: The ingredients should be retrieved if they expire before the specified date.
   */
  @Test
  void testFindExpiringIngredientsBeforeDate() {
    // All ingredients that expire before 10 months from now
    List<Ingredient> foundIngredients = fridge.findExpiringIngredientsBeforeDate(LocalDate.now().plusMonths(10));
    assertTrue(foundIngredients.contains(milk));
    assertTrue(foundIngredients.contains(egg));

    // All ingredients that expire before 6 days from now
    foundIngredients = fridge.findExpiringIngredientsBeforeDate(LocalDate.now().plusDays(6));
    assertTrue(foundIngredients.contains(milk));
    assertFalse(foundIngredients.contains(egg));

    // All ingredients that expired in the past
    foundIngredients = fridge.findExpiringIngredientsBeforeDate(LocalDate.now().minusDays(1));
    assertTrue(foundIngredients.isEmpty());
  }

  /**
   * Test sorting the ingredients in the fridge alphabetically.
   * Expected outcome: The ingredients should be sorted in ascending order by name.
   */
  @Test
  void testFindSortedIngredients() {
    Ingredient butter = new Ingredient("Butter", 0.2, 10, Unit.KILOGRAM, LocalDate.now().plusDays(5));
    fridge.addIngredient(butter);
    Ingredient apple = new Ingredient("Apple", 1, 20, Unit.KILOGRAM, LocalDate.now().plusDays(10));
    fridge.addIngredient(apple);

    List<Ingredient> sortedIngredients = fridge.findSortedIngredients();
    assertEquals(apple, sortedIngredients.get(0));
    assertEquals(butter, sortedIngredients.get(1));
    assertEquals(egg, sortedIngredients.get(2));
    assertEquals(milk, sortedIngredients.get(3));
  }

  /**
   * Test calculating the total price of a list of ingredients.
   * The total price should be the sum of the price of each ingredient.
   * Expected outcome: The total price should be calculated correctly.
   */
  @Test
  void testCalculateTotalPrice() {
    assertEquals(56, fridge.calculateIngredientsPrice(List.of(milk, egg)));
    assertEquals(20, fridge.calculateIngredientsPrice(List.of(milk)));
  }

  // --------------------------- NEGATIVE TESTS ----------------------------------
  /**
   * Test adding a {@code null} ingredient to the fridge.
   * Expected outcome: An IllegalArgumentException should be thrown.
   */
  @Test
  void testAddNullIngredient() {
    assertThrows(IllegalArgumentException.class, () -> fridge.addIngredient(null));
  }

  /**
   * Test adding a duplicate ingredient with an incompatible unit, expiry date or price per unit.
   * Expected outcome: The existing ingredient should not be updated,
   * and the new ingredient should not be added.
   */
  @Test
  void testAddDuplicateInvalidIngredient() {
    // Add ingredient 'egg' but with an incompatible unit
    Ingredient egg2 = new Ingredient("Egg", 12, 3, Unit.KILOGRAM, LocalDate.now().plusDays(20));
    assertThrows(IllegalArgumentException.class, () -> fridge.addIngredient(egg2));

    // Add ingredient 'egg' but with a different expiry date
    Ingredient egg3 = new Ingredient("Egg", 12, 3, Unit.PIECE, LocalDate.now().plusDays(10));
    assertThrows(IllegalArgumentException.class, () -> fridge.addIngredient(egg3));

    // Add ingredient 'egg' but with a different price per unit
    Ingredient egg4 = new Ingredient("Egg", 2, 15, Unit.PIECE, LocalDate.now().plusDays(20));
    assertThrows(IllegalArgumentException.class, () -> fridge.addIngredient(egg4));

    // Ensure that the original ingredient 'egg' was not updated
    assertTrue(fridge.findIngredientByName("Egg").isPresent());
    assertEquals(12, fridge.findIngredientByName("Egg").get().getQuantity());
  }

  /**
   * Test removing a non-existent ingredient from the fridge.
   * Expected outcome: An IllegalArgumentException should be thrown,
   * and the fridge should not be updated.
   */
  @Test
  void testRemoveNonExistentIngredient() {
    assertThrows(IllegalArgumentException.class, () -> fridge.removeIngredient("Bread", 1, Unit.KILOGRAM));
  }

  /**
   * Test removing an invalid quantity of an ingredient from the fridge.
   * Expected outcome: An IllegalArgumentException should be thrown,
   * and the fridge should not be updated.
   */
  @Test
  void testRemoveInvalidQuantityOfIngredient() {
    // Remove a negative quantity of an ingredient
    assertThrows(IllegalArgumentException.class, () -> fridge.removeIngredient("Milk", -1, Unit.LITRE));

    // Remove a quantity that results in a negative quantity for the ingredient
    assertThrows(IllegalArgumentException.class, () -> fridge.removeIngredient("Milk", 2, Unit.LITRE));
  }

  /**
   * Test finding a non-existent ingredient by name.
   * Expected outcome: The search should return an empty {@code Optional}.
   */
  @Test
  void testFindNonExistentIngredientByName() {
    assertTrue(fridge.findIngredientByName("Bread").isEmpty());
  }
}
