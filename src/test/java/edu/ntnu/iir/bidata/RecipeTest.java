package edu.ntnu.iir.bidata;

import edu.ntnu.iir.bidata.model.Ingredient;
import edu.ntnu.iir.bidata.model.Recipe;
import edu.ntnu.iir.bidata.model.Unit;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;


/**
 * Unit tests for the {@link Recipe} class.
 *
 * <p>This test class validates the functionality, robustness, and edge cases of the
 * {@code Recipe} class, including the creation and management of recipes and their ingredients.</p>
 *
 * <b>Positive Tests:</b>
 * <ul>
 *   <li>Creates a valid recipe with a name, description, and instruction.</li>
 *   <li>Adds a valid ingredient to a recipe and ensures it is included in the recipe's list of ingredients.</li>
 * </ul>
 *
 * <b>Negative Tests:</b>
 * <ul>
 *   <li>Throws an exception when creating a recipe with an invalid name (null, empty, or blank).</li>
 *   <li>Throws an exception when creating a recipe with an invalid description (null, empty, or blank).</li>
 *   <li>Throws an exception when creating a recipe with an invalid instruction (null, empty, or blank).</li>
 *   <li>Throws an exception when attempting to add a {@code null} ingredient to a recipe.</li>
 * </ul>
 *
 * <p>The tests ensure that the {@code Recipe} class adheres to the expected behavior, handles invalid inputs gracefully,
 * and correctly manages its state when interacting with ingredients.</p>
 *
 * <strong>This class-level documentation was generated by ChatGPT.</strong>
 */
public class RecipeTest {
  // --------------------------- POSITIVE TESTS ----------------------------------

  /**
   * Test creation of an instance of the Recipe with a valid name, description and instruction.
   * Expected outcome: A recipe should be created with a name,
   * description and instruction equal to the provided values.
   */
  @Test
  void testCreateValidRecipe() {
    Recipe recipe = new Recipe("Pasta Recipe", "Delicious pasta recipe", "Cook for 10 minutes");
    assertEquals(recipe.getName(), "Pasta Recipe");
    assertEquals(recipe.getDescription(), "Delicious pasta recipe");
    assertEquals(recipe.getInstruction(), "Cook for 10 minutes");
  }

  /**
   * Test adding a valid ingredient to a recipe.
   * Expected outcome: The ingredient should be added to the recipe's list of ingredients.
   */
  @Test
  void testAddValidIngredient() {
    Recipe recipe = new Recipe("Pasta Recipe", "Delicious pasta recipe", "Cook for 10 minutes");
    Ingredient ingredient = new Ingredient("Pasta", 200, 0.1, Unit.GRAM, LocalDate.of(2024, 11, 10));
    recipe.addIngredient(ingredient);
    List<Ingredient> ingredients = recipe.getIngredients();
    assertEquals(1, ingredients.size());
    assertEquals(ingredient, ingredients.getFirst());
  }

  // --------------------------- NEGATIVE TESTS ----------------------------------

  /**
   * Test creating a recipe with an invalid name, which is null, empty or blank.
   * Expected outcome: An IllegalArgumentException should be thrown in all cases.
   */
  @Test
  void testCreateRecipeWithInvalidName() {
    assertThrows(IllegalArgumentException.class, () -> new Recipe(null, "Delicious pasta recipe", "Cook for 10 minutes"));
    assertThrows(IllegalArgumentException.class, () -> new Recipe("", "Delicious pasta recipe", "Cook for 10 minutes"));
    assertThrows(IllegalArgumentException.class, () -> new Recipe("     ", "Delicious pasta recipe", "Cook for 10 minutes"));
  }

  /**
   * Test creating a recipe with an invalid description, which is null, empty or blank.
   * Expected outcome: An IllegalArgumentException should be thrown in all cases.
   */
  @Test
  void testCreateRecipeWithInvalidDescription() {
    assertThrows(IllegalArgumentException.class, () -> new Recipe("Pasta Recipe", null, "Cook for 10 minutes"));
    assertThrows(IllegalArgumentException.class, () -> new Recipe("Pasta Recipe", "", "Cook for 10 minutes"));
    assertThrows(IllegalArgumentException.class, () -> new Recipe("Pasta Recipe", "   ", "Cook for 10 minutes"));
  }

  /**
   * Test creating a recipe with an invalid instruction, which is null, empty or blank.
   * Expected outcome: An IllegalArgumentException should be thrown in all cases.
   */
  @Test
  void testCreateRecipeWithInvalidInstruction() {
    assertThrows(IllegalArgumentException.class, () -> new Recipe("Pasta Recipe", "Delicious pasta recipe", null));
    assertThrows(IllegalArgumentException.class, () -> new Recipe("Pasta Recipe", "Delicious pasta recipe", ""));
    assertThrows(IllegalArgumentException.class, () -> new Recipe("Pasta Recipe", "Delicious pasta recipe", "    "));
  }

  /**
   * Test adding a null ingredient to a recipe.
   * Expected outcome: An IllegalArgumentException should be thrown, and the ingredient should not be added to the recipe.
   */
  @Test
  void testAddNullIngredient() {
    Recipe recipe = new Recipe("Pasta Recipe", "Delicious pasta recipe", "Cook for 10 minutes");
    assertThrows(IllegalArgumentException.class, () -> recipe.addIngredient(null));
    assertTrue(recipe.getIngredients().isEmpty());
  }
}
