package edu.ntnu.iir.bidata;

import edu.ntnu.iir.bidata.model.Unit;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit tests for the {@link Unit} class.
 *
 * <p>This test class validates the functionality, correctness, and robustness of the {@code Unit} class,
 * including compatibility checks, unit conversions, and unit retrieval by symbols.</p>
 *
 * <b>Positive Tests:</b>
 * <ul>
 *   <li>Verifies that units of the same type are correctly identified as compatible using the {@link Unit#isCompatibleWith(Unit)} method.</li>
 *   <li>Tests conversion of values to the base unit using the {@link Unit#convertToBaseUnitValue(double)} method.</li>
 *   <li>Tests conversion of values from the base unit using the {@link Unit#convertFromBaseUnitValue(double)} method.</li>
 *   <li>Retrieves a unit by its symbol using the {@link Unit#getUnitBySymbol(String)} method for valid symbols.</li>
 * </ul>
 *
 * <b>Negative Tests:</b>
 * <ul>
 *   <li>Ensures that units of different types are correctly identified as incompatible using the {@link Unit#isCompatibleWith(Unit)} method.</li>
 *   <li>Throws an {@code IllegalArgumentException} when {@link Unit#isCompatibleWith(Unit)} is called with a {@code null} unit.</li>
 *   <li>Throws an {@code IllegalArgumentException} when converting to or from the base unit using negative values in the {@link Unit#convertToBaseUnitValue(double)} and {@link Unit#convertFromBaseUnitValue(double)} methods.</li>
 *   <li>Throws an {@code IllegalArgumentException} when retrieving a unit by an invalid symbol using {@link Unit#getUnitBySymbol(String)}.</li>
 * </ul>
 *
 * <p>The tests ensure that the {@code Unit} class correctly handles unit compatibility, performs accurate conversions,
 * and gracefully handles invalid inputs such as {@code null} values or invalid symbols.</p>
 *
 * <strong>This class-level documentation was generated by ChatGPT.</strong>
 */
public class UnitTest {
  // ------------------------- POSITIVE TESTS ----------------------------------
  /**
   * Tests checking if two units are compatible using the {@link Unit#isCompatibleWith(Unit)} method.
   * <p>Expected outcome: The method should correctly identify units of the same type as compatible.</p>
   */
  @Test
  void testUnitCompatibilityWithSameType() {
    assertTrue(Unit.LITRE.isCompatibleWith(Unit.DECILITRE));
    assertTrue(Unit.GRAM.isCompatibleWith(Unit.MILLIGRAM));
    assertTrue(Unit.PIECE.isCompatibleWith(Unit.PIECE));
  }

  /**
   * Tests converting values to the base unit using the {@link Unit#convertToBaseUnitValue(double)} method.
   * <p>Expected outcome: The method should correctly convert values to the base unit.</p>
   */
  @Test
  void testConvertToBaseUnitValue() {
    assertEquals(1.0, Unit.LITRE.convertToBaseUnitValue(1.0));
    assertEquals(0.1, Unit.DECILITRE.convertToBaseUnitValue(1.0));
    assertEquals(0.001, Unit.MILLILITRE.convertToBaseUnitValue(1.0));

    assertEquals(1.0, Unit.KILOGRAM.convertToBaseUnitValue(1.0));
    assertEquals(0.001, Unit.GRAM.convertToBaseUnitValue(1.0));
    assertEquals(0.000001, Unit.MILLIGRAM.convertToBaseUnitValue(1.0));

    assertEquals(1.0, Unit.PIECE.convertToBaseUnitValue(1.0));
  }

  /**
   * Tests converting values from the base unit using the {@link Unit#convertFromBaseUnitValue(double)} method.
   * <p>Expected outcome: The method should correctly convert values from the base unit.</p>
   */
  @Test
  void testConvertFromBaseUnitValue() {
    assertEquals(10.0, Unit.DECILITRE.convertFromBaseUnitValue(1.0));
    assertEquals(1000.0, Unit.MILLILITRE.convertFromBaseUnitValue(1.0));
    assertEquals(1.0, Unit.LITRE.convertFromBaseUnitValue(1.0));

    assertEquals(1000.0, Unit.GRAM.convertFromBaseUnitValue(1.0));
    assertEquals(1000000.0, Unit.MILLIGRAM.convertFromBaseUnitValue(1.0));
    assertEquals(1.0, Unit.KILOGRAM.convertFromBaseUnitValue(1.0));

    assertEquals(1.0, Unit.PIECE.convertFromBaseUnitValue(1.0));
  }

  /**
   * Tests retrieving a unit by its symbol using the {@link Unit#getUnitBySymbol(String)} method.
   * <p>Expected outcome: The method should return the correct unit for valid symbols.</p>
   */
  @Test
  void testGetValidUnitBySymbol() {
    assertEquals(Unit.MILLILITRE, Unit.getUnitBySymbol("ml"));
    assertEquals(Unit.MILLILITRE, Unit.getUnitBySymbol("mL"));
    assertEquals(Unit.KILOGRAM, Unit.getUnitBySymbol("kg"));
    assertEquals(Unit.KILOGRAM, Unit.getUnitBySymbol("KG"));
    assertEquals(Unit.PIECE, Unit.getUnitBySymbol("piece"));
    assertEquals(Unit.PIECE, Unit.getUnitBySymbol("PIECE"));
  }

  // ------------------------- NEGATIVE TESTS ----------------------------------

  /**
   * Tests checking if two units are compatible using the {@link Unit#isCompatibleWith(Unit)} method.
   * <p>Expected outcome: The method should correctly identify units of different types as incompatible.</p>
   */
  @Test
  void testUnitCompatibilityWithDifferentTypes() {
    assertFalse(Unit.LITRE.isCompatibleWith(Unit.KILOGRAM));
    assertFalse(Unit.MILLIGRAM.isCompatibleWith(Unit.DECILITRE));
    assertFalse(Unit.PIECE.isCompatibleWith(Unit.KILOGRAM));
  }

  /**
   * Tests checking if two units are compatible using the {@link Unit#isCompatibleWith(Unit)} method.
   * <p>Expected outcome: The method should throw an {@link IllegalArgumentException} when given a null unit.</p>
   */
  @Test
  void testUnitCompatibilityWithNullUnit() {
    assertThrows(IllegalArgumentException.class, () -> Unit.LITRE.isCompatibleWith(null));
    assertThrows(IllegalArgumentException.class, () -> Unit.GRAM.isCompatibleWith(null));
    assertThrows(IllegalArgumentException.class, () -> Unit.PIECE.isCompatibleWith(null));
  }

  /**
   * Tests converting values to the base unit using the {@link Unit#convertToBaseUnitValue(double)} method.
   * <p>Expected outcome: The method should throw an {@link IllegalArgumentException} when given a negative value.</p>
   */
  @Test
  void testConvertToBaseUnitValueInvalid() {
    assertThrows(IllegalArgumentException.class, () -> Unit.LITRE.convertToBaseUnitValue(-0.5));
    assertThrows(IllegalArgumentException.class, () -> Unit.GRAM.convertToBaseUnitValue(-100));
    assertThrows(IllegalArgumentException.class, () -> Unit.PIECE.convertToBaseUnitValue(-12.0));
  }

  /**
   * Tests converting values from the base unit using the {@link Unit#convertFromBaseUnitValue(double)} method.
   * <p>Expected outcome: The method should throw an {@link IllegalArgumentException} when given a negative value.</p>
   */
  @Test
  void testConvertFromBaseUnitValueInvalid() {
    assertThrows(IllegalArgumentException.class, () -> Unit.LITRE.convertFromBaseUnitValue(-0.5));
    assertThrows(IllegalArgumentException.class, () -> Unit.GRAM.convertFromBaseUnitValue(-100));
    assertThrows(IllegalArgumentException.class, () -> Unit.PIECE.convertFromBaseUnitValue(-12.0));
  }

  /**
   * Tests retrieving a unit by its symbol using the {@link Unit#getUnitBySymbol(String)} method.
   * <p>Expected outcome: The method should throw an {@link IllegalArgumentException} for invalid symbols.</p>
   */
  @Test
  void testGetInvalidUnitBySymbol() {
    assertThrows(IllegalArgumentException.class, () -> Unit.getUnitBySymbol("invalid"));
    assertThrows(IllegalArgumentException.class, () -> Unit.getUnitBySymbol("123"));
    assertThrows(IllegalArgumentException.class, () -> Unit.getUnitBySymbol("unit"));
  }
}
